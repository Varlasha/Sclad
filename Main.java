/*Есть склад – очередь, и три потока – один производитель и два потребителя. Производитель производит целочисленное значение и помещает его в очередь, 
значение не изменяется пока, кто-либо из потребителей не потребит одно или несколько значений со склада. 
Тогда производитель начинает производство со значения на 1 больше. 
Производитель производит значения и помещает их на склад либо пока склад не станет полным, либо пока его работу не прервет кто-либо из потребителей. 
Потребитель потребляет значения со склада либо пока склад не станет пустым, либо пока его работу не прервет другой потребитель или производитель. 
В процессе выполнения программы требуется выводить на экран состояние очереди (ее заполненной части) после каждой операции добавления значения в очередь 
или удаления значения из очереди.
Склад – ограниченная циклическая очередь, которая реализует абстракцию FIFO (first-in-first-out). 
public interface Queue {
 void put(int val);
 int get();
 boolean full();
 boolean empty();
}
Реализуется на целочисленном массиве (размер 10). Дополнительно используются две целочисленные переменные: 
первая – хранит номер элемента массива – начало очереди, вторая – хранит номер элемента массива – конец очереди. 
Заполненная часть очереди – элементы массива от позиции ее начала до позиции ее конца. 
Очередь циклическая, т. е. позиция конца может быть меньше позиции начала. 
В этом случае заполненная часть очереди – от позиции начала очереди до конца массива и от начала массива до конца очереди.
Полнота и пустота очереди определяются по взаимному расположению переменных, отвечающих за начало и конец очереди. 
Если начало и конец очереди совпадают, то это означает, что в очереди только одно значение. 
Недопустимо задавать значения конца и начала очереди значениями меньше 0 и больше 9. 
Не использовать при реализации методов full() и empty() условное выражение или оператор ветвления.
Сериализацию доступа к очереди реализовать с помощью объектов класса ReentrantLock и Condition.
Классы потоков должны реализовывать интерфейс Runnable. Запуск потоков осуществлять в конструкторах классов.
Общие требования:
1. Не использовать коллекции.
2. Не использовать доступ по умолчанию. Указывать доступ для классов, данных, методов.
*/
package sklad;

public class Main

{

public static void main (String[] args)

{

Queue queue =new Queue();//Создаём склад

Producer p=new Producer(queue);//Запускаем производителей

Customer cus1=new Customer(queue);//Запускаем 1 потребителя

Customer cus2=new Customer(queue);//Запускаем 2 потребителя

}

}
